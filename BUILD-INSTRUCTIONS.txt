General Requirements
====================
To build Imgraph and the custom Blueprints Gremlin and Rexster you need Git, Maven2 and Java Development Kit 1.6 or superior. ZeroMQ
requires additional components that are detailed in the following sections.

I. Building of Imgraph
======================

1. Installation of ZeroMQ
-------------------------
You can review the site http://http://zeromq.org/intro:get-the-software for instructions. The version used in Imgraph is 3.2.2, 
if you are using Ubuntu you can use the script install_zermoq.sh provided in the msc folder.

2. Installation of JZMQ
-----------------------
Get the source code of it using the follow command: 
	git clone https://github.com/zeromq/jzmq.git

Then, execute the following commands on the folder created on the previous step:
	./autogen.sh
	./configure
	make
	sudo make install

Then, execute the following command to build the JAR files inside the target subfolder
	mvn clean package

Finally, add the jars to the local maven repository. Assuming you're in the jzmq directory and the jar files are in the target subdirectory and 
you're running a linux machine of 64 bits, you can run

mvn install:install-file -Dfile=jzmq-2.2.3-SNAPSHOT.jar -DgroupId=org.zeromq -DartifactId=jzmq -Dversion=2.2.3-SNAPSHOT -Dpackaging=jar
mvn install:install-file -Dfile=jzmq-2.2.3-SNAPSHOT-native-amd64-Linux.jar -DgroupId=org.zeromq -DartifactId=jzmq-native -Dversion=2.2.3-SNAPSHOT -Dpackaging=jar

3. Adding Trove to the maven repository
----------------------------------------------------
Download the file https://bitbucket.org/robeden/trove/downloads/trove-3.0.3.zip, extract it and the access the subfolder 3.0.3/lib

Execute the following command:

	mvn install:install-file -Dfile=trove-3.0.3.jar -DgroupId=trove -DartifactId=trove -Dversion=3.0.3 -Dpackaging=jar

4. Compiling the project and creating the executable JAR
--------------------------------------------------------

If you want to build an executable jar file, run the following on the directory imgraph-core 

mvn clean install 

This will create a JAR file and a lib subdirectory inside the target directory. The contents of the target directory then can be copied to any other machine 
to run a node of the graph database; however, in any machine were the graph database will be executed there must be the native libraries of ZMQ.

It's better to add the imgraph library to the local maven repository for the posterior use of it from Gremlin or Rexster; to do this, execute the 
following command on the directory imgraph-core

	mvn install:install-file -Dfile=target/imgraph-core-0.0.1-SNAPSHOT.jar -DgroupId=com.imgraph -DartifactId=imgraph-core -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar

II. Building of custom Gremlin version
======================================

1. Clone in your machine the Gremlin code
-----------------------------------------
Imgraph uses the version 2.5 of Gremlin and Blueprints, to clone the code of it, execute the following command:

	git clone https://github.com/tinkerpop/gremlin.git

2. Reviewing local maven dependencies
--------------------------------------
Ensure that the maven dependencies imgraph-core, jzmq, and trove are installed on the local maven repository. If not, the instructions to do it
are in the section "Building of Imgraph" of this document.

3. Modifying the code of Gremlin
--------------------------------

First, open for edition the source code file of the class com.tinkerpop.gremlin.Imports on the src folder of the subdirectory gremlin-java. 
Then, add the following line of code in the static section of that file (immediately after line 30). 
	imports.add("com.tinkerpop.blueprints.impls.imgraph.*");
You can check the file Imports.java on the msc subfolder of the CD if you have doubts about where you should add this line of code.

4. Modifying the pom.xml file of the subproject gremlin-groovy
--------------------------------------------------------------
The following dependencies must be added to the pom.xml file of the subproject gremlin-groovy. Add them just before  the 
<!-- PROVIDED DEPENDENCIES --> section

		<dependency>
			<groupId>com.imgraph</groupId>
			<artifactId>imgraph-core</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
			<version>5.2.0.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.jbossts</groupId>
			<artifactId>jbossjta</artifactId>
			<version>4.16.4.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jzmq</artifactId>
			<version>2.2.3-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jzmq-native</artifactId>
			<version>2.2.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor_2.10</artifactId>
			<version>2.1.0</version>
		</dependency>
		
		<dependency>
			<groupId>trove</groupId>
			<artifactId>trove</artifactId>
			<version>3.0.3</version>
		</dependency>

The file gremlin-groovy-pom.xml located in the folder msc is an example of this modified pom file

5. Building of the code
-----------------------

To create the executable version of the modified Gremlin version, execute the following commands:

	mvn clean install -Dmaven.test.skip=true

II. Building of custom Rexster version
======================================
	
1. Clone the code of Rexster
----------------------------
Execute the following command
	git clone https://github.com/tinkerpop/rexster.git

2. Reviewing local maven dependencies
--------------------------------------
Ensure that the maven dependencies imgraph-core, jzmq, and trove are installed on the local maven repository. If not, the instructions to do it
are in the section "Building of Imgraph" of this document.
	
3. Modify the dependencies of the pom file
------------------------------------------
Add the following dependency to the pom.xml file of the subproject rexster-server

		<dependency>
			<groupId>com.imgraph</groupId>
			<artifactId>imgraph-core</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
			<version>5.2.0.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.jbossts</groupId>
			<artifactId>jbossjta</artifactId>
			<version>4.16.4.Final</version>
		</dependency>
		
		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jzmq</artifactId>
			<version>2.2.3-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jzmq-native</artifactId>
			<version>2.2.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor_2.10</artifactId>
			<version>2.1.0</version>
		</dependency>
		
		<dependency>
			<groupId>trove</groupId>
			<artifactId>trove</artifactId>
			<version>3.0.3</version>
		</dependency>

An example of this file is in the msc folder with the name rexster-server-pom.xml
		
4. Compiling and installing
---------------------------
Execute the following command on the rexster main folder

	mvn clean install

5. Configuring the Rexster server
---------------------------------
You must configure the Rexster server to start an Imgraph database on startup, to do that add the following lines to the file 
rexster/rexster-server/target/rexster-server-2.5.0-SNAPSHOT-standalone/config/rexster.xml inside the <graphs> element

			<graph>
        <graph-name>imgraph</graph-name>
        <graph-type>com.tinkerpop.rexster.config.ImgraphGraphConfiguration</graph-type>
        <config-file>/mnt/data/imgraph/exec/config.properties</config-file>
      </graph>

Where the config-file element specifies the complete path of a valid configuration file

If you plan to use the Dog House interface from a remote machine you have to edit the value of the element <base-uri> located inside
the element <http>. You should put as a value the IP or hostname of the machine running the server

An example of this files is located in the msc folder of the CD
